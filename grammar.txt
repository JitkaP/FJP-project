program = block "."

block = { declaration } { "procedure" ident ";" block ";" } statement
		
declaration = 
			  "const" type ident ":=" value ";"
			| "const" type ident "[]" ":= " "{" value { "," value } "};"
			| "var" type ident [ "[" number "]" ] { "," ident [ "[" number "]" ] } ";"
			
statement = [			
				ident [ "[" number "]" ] { ":=" ident [ "[" number "]" ] } ":=" expression
				| "call" ident
				| "begin" statement { statement } "end"
				| "if" condition "then" statement [ "else" statement ]
				| "while" condition "do" statement
				| "do" statement "while" condition
				| "for" ident ":=" number_expression "to" number_expression "do" statement				
				| ident ":=" condition "?" expression ":" expression
				| "write" "(" string_expression ")"
				| "read" "(" ident ")"
			] ";"

condition = "(" 
				( "odd" number_expression
					| number_expression ( "<" | "<=" | ">" | ">=" ) number_expression 
					| expression ( "=" | "!=" ) expression 
					| bool_expression
				)	
			")"

expression = number_expression | bool_expression | string_expression

bool_expression = [ "!" ] ( boolean | ident ) { ( "&&" | "||") bool_expression }

string_expression = ( ident | string_value ) { "+" ( ident | string_value ) }

number_expression = [ "+" | "-" ] term { ( "+" | "-" ) term }

term = factor { ( "*" | "/" ) factor }

factor = ident 
			| number 
			| "(" number_expression ")"		

type = "int" | "bool" | "string"

ident = letter { letter | number }

value = number | boolean | string_value

string_value = """ { letter | number } """

letter = { "a"|"b"|"c"|...|"x"|"y"|"z" }
number = { "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9" }
boolean = "true" | "false"
