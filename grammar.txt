program = block "."

block = { declaration } { "procedure" ident ";" block ";" } statement
		
declaration = 
			  "const" type ident ":=" number | boolean | letter ";"
			| "const" type ident "[]" ":= " "{" number | boolean | letter {, number | boolean | letter } "};"
			| "var" type ident [ "[" number "]" ] { , ident [ "[" number "]" ] } ";"
			

statement = [
				ident { ":=" ident } ":=" expression 
				| "call" ident
				| "begin" statement { statement } "end"
				| "if" condition "then" statement [ "else" statement ]
				| "while" condition "do" statement
				| "do" statement "while" condition
				| "for" ident ":=" number_expression "to" number_expression "do" statement
				| "{" ident { "," ident } "}" ":="
					"{" expression { "," expression } "}" 
					":=" "{" expression { "," expression } "}"
				| ident ":=" condition "?" expression ":" expression
			] ";"

condition = "(" 
				( "odd" number_expression
					| number_expression ( "<" | "<=" | ">" | ">=" ) number_expression 
					| expression ( "=" | "!=" ) expression )	
			")"

expression = number_expression | boolean | """ { letter | number } """

number_expression = [ "+" | "-" ] term { ( "+" | "-" ) term }

term = factor { ( "*" | "/" ) factor }

factor = ident 
			| number 
			| "(" number_expression ")"
			
ident = letter { letter | number }

type = int | bool | string
letter = { "a"|"b"|"c"|... |"x"|"y"|"z" }
number = { "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9" }
boolean = "true" | "false"
